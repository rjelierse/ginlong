package message

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestMeasurement(t *testing.T) {
	v2messages := []string{
		"010705fae174005c010000e5bb00600100830f000031363045333132303431353030363820fd0122090d006200010000000000560000000000ab0988135c08000080020000f2170000000000000100000000000000000000000000010000000100360f0000f82ae803f30800004d0000009000000060005301000012010000340004005c080000150004000d000e0022000e00e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"0107057ee374005b010000e7bb00600100840f000031363045333132303431353030363820000212090c006000010000000000540000000000a70986131608000094020000fc170000000000000100000000000000000000000000010000000100be0e0000f82ae803b50800004d00000090000000600053010000120100003400040016080000150004000d000f0028001700e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"010705d487750011000000804801600100e10f000031363045333132303431353030363820c60111090c005200010000000000460000000000c2098913e0060000e600000042180000000000000100000000000000000000000000010000000100d50e0000f82ae8036f070000540000009000000075005b0100001201000034000400e0060000150004000e000d0015002c00e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
	}
	for idx, payload := range v2messages {
		t.Run(fmt.Sprintf("v2#%d", idx+1), func(t *testing.T) {
			data, err := hex.DecodeString(payload)
			require.NoError(t, err)

			var message Measurement
			require.NoError(t, message.UnmarshalBinary(data))

			assert.Equal(t, "160E31204150068", message.Inverter.SerialNumber)
			assert.Equal(t, uint16(0x0040), message.Inverter.FirmwareMain)
			assert.Equal(t, uint16(0x0026), message.Inverter.FirmwareSlave)
			assert.Equal(t, uint16(0x00e3), message.Inverter.Model)
		})
	}

	v3messages := []string{
		"810705cbe0740028000000000000000100820f000031363045333132303431353030363820fa01fa080c005f00010000000000530000000000a5098713020800006c020000f2170000000000000100000000000000000000000000010000000100fe0e0000f82ae803870800004d000000900000006000530100001201000034000400f8070000150004000d000e001d000400e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"810705cbe0740028000000000000000100820f000031363045333132303431353030363820fa01fa080c005f00010000000000530000000000a5098713020800006c020000f2170000000000000100000000000000000000000000010000000100fe0e0000f82ae803870800004d000000900000006000530100001201000034000400f8070000150004000d000e001d000400e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"810705cbe0740028000000000000000100820f000031363045333132303431353030363820fa01fa080c005f00010000000000530000000000a5098713020800006c020000f2170000000000000100000000000000000000000000010000000100fe0e0000f82ae803870800004d000000900000006000530100001201000034000400f8070000150004000d000e001d000400e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"8107054fe2740028000000000000000100830f000031363045333132303431353030363820ff0122090c006300010000000000570000000000ab0989136608000080020000f2170000000000000100000000000000000000000000010000000100280f0000f82ae8030a0900004d00000090000000600053010000120100003400040070080000150004000d000f0023000e00e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"8107054fe2740028000000000000000100830f000031363045333132303431353030363820ff0122090c006300010000000000570000000000ab0989136608000080020000f2170000000000000100000000000000000000000000010000000100280f0000f82ae8030a0900004d00000090000000600053010000120100003400040070080000150004000d000f0023000e00e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"8107054fe2740028000000000000000100830f000031363045333132303431353030363820ff0122090c006300010000000000570000000000ab0989136608000080020000f2170000000000000100000000000000000000000000010000000100280f0000f82ae8030a0900004d00000090000000600053010000120100003400040070080000150004000d000f0023000e00e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		"8107054d87750041000000774801600100e10f000031363045333132303431353030363820c20119090c005300010000000000480000000000c0098513f4060000dc00000042180000000000000100000000000000000000000000010000000100b00e0000f82ae8038d070000540000009000000075005a0100001201000034000400f4060000150004000e000d0012002200e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
	}
	for idx, payload := range v3messages {
		t.Run(fmt.Sprintf("v3#%d", idx+1), func(t *testing.T) {
			data, err := hex.DecodeString(payload)
			require.NoError(t, err)

			var message Measurement
			require.NoError(t, message.UnmarshalBinary(data))

			assert.Equal(t, "160E31204150068", message.Inverter.SerialNumber)
			assert.Equal(t, uint16(0x0040), message.Inverter.FirmwareMain)
			assert.Equal(t, uint16(0x0026), message.Inverter.FirmwareSlave)
			assert.Equal(t, uint16(0x00e3), message.Inverter.Model)
		})
	}
}
