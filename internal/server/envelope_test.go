package server

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/rjelierse/ginlong/internal/message"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEnvelope(t *testing.T) {
	const serialNo = 719180488

	for _, tc := range []struct {
		message         string
		messageLength   uint8
		messageType     message.Type
		messageCounter  uint8
		protocolVersion uint8
		originator      uint32
		payload         string
	}{
		{
			message:         "a5560010410001c8d2dd2a020de175001300000000000000053c780164034d575f30385f303530315f312e35380000000000000000000000000000000000000000000000000098d863e473b23139322e3136382e312e323532000000dc470101053215",
			messageLength:   86,
			messageType:     message.TypeAnnouncement,
			messageCounter:  1,
			protocolVersion: 0,
			originator:      serialNo,
			payload:         "020de175001300000000000000053c780164034d575f30385f303530315f312e35380000000000000000000000000000000000000000000000000098d863e473b23139322e3136382e312e323532000000dc47010105",
		},
		{
			message:         "a5e90010420249c8d2dd2a810705801674004f010000000000000100d60e000031363045333132303431353030363820a5015a090c001a00010000000000160000000000790989131c020000c201000084170000000000000100000000000000000000000000010000000100720e0000f82ae8036e020000410000009000000058004701000012010000340004001c020000150004000c000e0011000e00e3002600400000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003007615",
			messageLength:   233,
			messageType:     message.TypeMeasurement,
			messageCounter:  73,
			protocolVersion: 2,
			originator:      serialNo,
			payload:         "810705801674004f010000000000000100d60e000031363045333132303431353030363820a5015a090c001a00010000000000160000000000790989131c020000c201000084170000000000000100000000000000000000000000010000000100720e0000f82ae8036e020000410000009000000058004701000012010000340004001c020000150004000c000e0011000e00e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		},
		{
			message:         "a5e90010420349c8d2dd2a810705cbe0740028000000000000000100820f000031363045333132303431353030363820fa01fa080c005f00010000000000530000000000a5098713020800006c020000f2170000000000000100000000000000000000000000010000000100fe0e0000f82ae803870800004d000000900000006000530100001201000034000400f8070000150004000d000e001d000400e3002600400000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003006515",
			messageLength:   233,
			messageType:     message.TypeMeasurement,
			messageCounter:  73,
			protocolVersion: 3,
			originator:      serialNo,
			payload:         "810705cbe0740028000000000000000100820f000031363045333132303431353030363820fa01fa080c005f00010000000000530000000000a5098713020800006c020000f2170000000000000100000000000000000000000000010000000100fe0e0000f82ae803870800004d000000900000006000530100001201000034000400f8070000150004000d000e001d000400e300260040000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300",
		},
		{
			message:         "a52f0010430008c8d2dd2a81ffe075000500000000000000000048617a65730000000000000000000000000000000000000000000000000064016515",
			messageLength:   47,
			messageType:     message.TypeAccessPointInfo,
			messageCounter:  8,
			protocolVersion: 0,
			originator:      serialNo,
			payload:         "81ffe075000500000000000000000048617a6573000000000000000000000000000000000000000000000000006401",
		},
		{
			message:         "a501001047000cc8d2dd2a000515",
			messageLength:   1,
			messageType:     message.TypePing,
			messageCounter:  12,
			protocolVersion: 0,
			originator:      serialNo,
			payload:         "00",
		},
		{
			message:         "a53c001048000bc8d2dd2a01eee17500f4000000a949016001052c84e5715e4d575f30385f303530315f312e353800000000000000000000000000000000000000000000000000f115",
			messageLength:   60,
			messageType:     message.TypeUnk2,
			messageCounter:  11,
			protocolVersion: 0,
			originator:      serialNo,
			payload:         "01eee17500f4000000a949016001052c84e5715e4d575f30385f303530315f312e353800000000000000000000000000000000000000000000000000",
		},
	} {
		t.Run(fmt.Sprintf("Message.%s.v%d", tc.messageType.String(), tc.protocolVersion), func(t *testing.T) {
			data, err := hex.DecodeString(tc.message)
			require.NoError(t, err)

			envelope := Envelope(data)
			require.NoError(t, envelope.Validate())

			assert.Equal(t, tc.messageLength, envelope.Length())
			assert.Equal(t, tc.messageType, envelope.MessageType())
			assert.Equal(t, tc.messageCounter, envelope.MessageCounter())
			assert.Equal(t, tc.protocolVersion, envelope.ProtocolVersion())
			assert.Equal(t, tc.originator, envelope.Originator())

			payload, err := hex.DecodeString(tc.payload)
			require.NoError(t, err)
			assert.Equal(t, payload, envelope.Payload())
		})
	}
}
